diff --git a/development/lib/signal-watcher.js b/development/lib/signal-watcher.js
index 31ac5e919eef15ae22a73cfcccb5803bcb033592..f49ad1dafc9571cd065b802f351c3342fc4306a3 100644
--- a/development/lib/signal-watcher.js
+++ b/development/lib/signal-watcher.js
@@ -16,7 +16,7 @@ export function SignalWatcher(Base) {
             // ReactiveElement.performUpdate() also does this check, so we want to
             // also bail early so we don't erroneously appear to not depend on any
             // signals.
-            if (this.isUpdatePending === false) {
+            if (this.isUpdatePending === false || this.isConnected === false) {
                 return;
             }
             // If we have a previous effect, dispose it
diff --git a/lib/signal-watcher.js b/lib/signal-watcher.js
index 93e9b4088d7d9fa7434fa69d93e977e57c3cf56c..a58e5d3537c5aad637ed69a052caea1fe32d996d 100644
--- a/lib/signal-watcher.js
+++ b/lib/signal-watcher.js
@@ -3,5 +3,5 @@ import{effect as t}from"@preact/signals-core";
  * @license
  * Copyright 2023 Google LLC
  * SPDX-License-Identifier: BSD-3-Clause
- */function e(e){return class extends e{performUpdate(){var e;if(!1===this.isUpdatePending)return;null===(e=this._$Oo)||void 0===e||e.call(this);let s=!0;this._$Oo=t((()=>{s?(s=!1,super.performUpdate()):this.requestUpdate()}))}connectedCallback(){super.connectedCallback(),this.requestUpdate()}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Oo)||void 0===t||t.call(this)}}}export{e as SignalWatcher};
+ */function e(e){return class extends e{performUpdate(){var e;if(!1===this.isUpdatePending||!1===this.isConnected)return;null===(e=this._$Oo)||void 0===e||e.call(this);let s=!0;this._$Oo=t((()=>{s?(s=!1,super.performUpdate()):this.requestUpdate()}))}connectedCallback(){super.connectedCallback(),this.requestUpdate()}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Oo)||void 0===t||t.call(this)}}}export{e as SignalWatcher};
 //# sourceMappingURL=signal-watcher.js.map
