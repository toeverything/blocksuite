import '@blocksuite/blocks';
import '@blocksuite/editor';
import { createEditor, createDebugMenu, BlockSchema } from '@blocksuite/editor';
import { Workspace } from '@blocksuite/store';
import { getOptions } from './utils';
import './style.css';

const params = new URLSearchParams(location.search);
const isAutoInit = params.get('init') !== null;
const isE2E = params.get('room')?.includes('playwright');

const initButton = <HTMLButtonElement>document.getElementById('init-btn');
const options = getOptions();

/**
 * Manually create initial page structure.
 * In collaboration mode or on page refresh with local persistence,
 * the page structure will be automatically loaded from provider.
 * In these cases, this function should not be called.
 */
function createInitialPage(workspace: Workspace) {
  workspace.signals.pageAdded.once(id => {
    const page = workspace.getPage(id);
    const pageBlockId = page.addBlock({ flavour: 'affine:page' });
    const groupId = page.addBlock({ flavour: 'affine:group' }, pageBlockId);
    page.addBlock({ flavour: 'affine:paragraph' }, groupId);
  });

  workspace.createPage('page0');
}

// Subscribe for page update and create editor after page loaded.
function subscribePage(workspace: Workspace) {
  workspace.signals.pageAdded.once(pageId => {
    const page = workspace.getPage(pageId);
    const editor = createEditor(page);
    const debugMenu = createDebugMenu(workspace, editor);
    document.body.appendChild(editor);
    document.body.appendChild(debugMenu);
    initButton.disabled = true;

    // @ts-ignore
    [window.editor, window.page] = [editor, page];
  });
}

function main() {
  const workspace = new Workspace(options).register(BlockSchema);
  // @ts-ignore
  [window.workspace, window.blockSchema] = [workspace, BlockSchema];

  initButton.addEventListener('click', () => createInitialPage(workspace));

  // In E2E environment, initial state should be generated by test case,
  // instead of using this default setup.
  if (isE2E) return;

  subscribePage(workspace);

  if (isAutoInit) {
    createInitialPage(workspace);
  }
}

main();
